# IMPORTANT: This file is generated by cucumber-rails - edit at your own peril.
# It is recommended to regenerate this file in the future when you upgrade to a
# newer version of cucumber-rails. Consider adding your own code to a new file
# instead of editing this one. Cucumber will automatically load all features/**/*.rb
# files.

# require 'cucumber/rails'
# # require 'matestack/ui/core'
# require 'capybara/cucumber'
# require 'capybara'
# require 'capybara/dsl'
# require 'minitest-capybara'
# require 'cucumber/rails'
# require 'minitest/spec'
# require 'capybara/minitest/spec'
# require 'capybara_minitest_spec'
# require "selenium-webdriver"
# require 'capybara/cucumber'
# require 'capybara'
# require 'capybara/dsl'
# # require 'minitest-capybara'
# require 'cucumber/rails'
# require 'minitest/spec'
# require 'capybara/minitest/spec'
# require 'capybara_minitest_spec'
# require_relative './style_helper'

require 'capybara/cucumber'
require 'capybara'
require 'capybara/dsl'
require 'minitest-capybara'
require 'cucumber/rails'
require 'minitest/spec'
require 'capybara/minitest/spec'
require 'capybara_minitest_spec'

# frozen_string_literal: true

module MinitestWorld
  # include StyleHelper
  include Minitest::Assertions
  # include Minitest::Expectations
  # include Capybara::Node::Matchers
  include Minitest::Capybara::Behaviour
  include Capybara::DSL
end

# module Helpers
#   def without_resynchronize
#     page.driver.options[:resynchronize] = false
#     yield
#     page.driver.options[:resynchronize] = true
#   end
# end

# World(MinitestWorld, Capybara::DSL, Helpers)

World(MinitestWorld)
# World(Capybara::DSL)

Capybara.default_selector = :css

Capybara.register_driver :chrome do |app|
  options = Selenium::WebDriver::Chrome::Options.new
  options.add_argument('--allow-insecure-localhost')
  options.add_argument('--window-size=1400,1000')
  options.add_argument('--ignore-certificate-errors')

  Capybara::Selenium::Driver.new(
    app,
    browser: :chrome,
    capabilities: [options]
  )
end

Capybara.register_driver :chrome_headless do |app|
  options = Selenium::WebDriver::Chrome::Options.new
  options.add_argument('--headless')
  options.add_argument('--allow-insecure-localhost')
  options.add_argument('--window-size=1400,1000')
  options.add_argument('--ignore-certificate-errors')

  Capybara::Selenium::Driver.new(
    app,
    browser: :chrome,
    capabilities: [options]
  )
end

Selenium::WebDriver.logger.ignore(:browser_options)
Capybara.default_driver = :chrome_headless

# Capybara defaults to CSS3 selectors rather than XPath.
# If you'd prefer to use XPath, just uncomment this line and adjust any
# selectors in your step definitions to use the XPath syntax.
# Capybara.default_selector = :xpath

# By default, any exception happening in your Rails application will bubble up
# to Cucumber so that your scenario will fail. This is a different from how
# your application behaves in the production environment, where an error page will
# be rendered instead.
#
# Sometimes we want to override this default behaviour and allow Rails to rescue
# exceptions and display an error page (just like when the app is running in production).
# Typical scenarios where you want to do this is when you test your error pages.
# There are two ways to allow Rails to rescue exceptions:
#
# 1) Tag your scenario (or feature) with @allow-rescue
#
# 2) Set the value below to true. Beware that doing this globally is not
# recommended as it will mask a lot of errors for you!
#
ActionController::Base.allow_rescue = false

# Remove/comment out the lines below if your app doesn't have a database.
# For some databases (like MongoDB and CouchDB) you may need to use :truncation instead.
begin
  DatabaseCleaner.strategy = :transaction
rescue NameError
  raise "You need to add database_cleaner to your Gemfile (in the :test group) if you wish to use it."
end

Before do
  Thread.current[:current_spec] = self
end

# You may also want to configure DatabaseCleaner to use different strategies for certain features and scenarios.
# See the DatabaseCleaner documentation for details. Example:
#
#   Before('@no-txn,@selenium,@culerity,@celerity,@javascript') do
#     # { except: [:widgets] } may not do what you expect here
#     # as Cucumber::Rails::Database.javascript_strategy overrides
#     # this setting.
#     DatabaseCleaner.strategy = :truncation
#   end
#
#   Before('not @no-txn', 'not @selenium', 'not @culerity', 'not @celerity', 'not @javascript') do
#     DatabaseCleaner.strategy = :transaction
#   end
#

# Possible values are :truncation and :transaction
# The :transaction strategy is faster, but might give you threading problems.
# See https://github.com/cucumber/cucumber-rails/blob/master/features/choose_javascript_database_strategy.feature
Cucumber::Rails::Database.javascript_strategy = :truncation

